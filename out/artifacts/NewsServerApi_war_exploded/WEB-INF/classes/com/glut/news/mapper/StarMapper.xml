<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


 <!-- 名字空间,mybatis高版本后namespace属性是必须的，其作用用来区分每个SQL映射文件中的语句, 也就说在一个项目里可能会在不同的SQL 
	映射文件中存在相同的语句ID
	
	column不做限制，可以为任意表的字段，而property须为type 定义的pojo属性
<resultMap id="唯一的标识" type="映射的pojo对象">
  <id column="表的主键字段，或者可以为查询语句中的别名字段" jdbcType="字段类型" property="映射pojo对象的主键属性" />
  <result column="表的一个字段（可以为任意表的一个字段）" jdbcType="字段类型" property="映射到pojo对象的一个属性（须为type定义的pojo对象中的一个属性）"/>
  <association property="pojo的一个对象属性" javaType="pojo关联的pojo对象">
    <id column="关联pojo对象对应表的主键字段" jdbcType="字段类型" property="关联pojo对象的主席属性"/>
    <result  column="任意表的字段" jdbcType="字段类型" property="关联pojo对象的属性"/>
  </association>
  集合中的property须为oftype定义的pojo对象的属性
  <collection property="pojo的集合属性" ofType="集合中的pojo对象">
    <id column="集合中pojo对象对应的表的主键字段" jdbcType="字段类型" property="集合中pojo对象的主键属性" />
    <result column="可以为任意表的字段" jdbcType="字段类型" property="集合中的pojo对象的属性" />  
  </collection>
</resultMap>

	 -->
	
	<mapper namespace="com.glut.news.mapper.StarMapper">
	<resultMap type="star" id="baseResultMap" >
		<id column="Star_Id" property="Star_Id" />
		<result column="Star_ContentId" property="Star_ContentId" />
		<result column="Star_UserId" property="Star_UserId" />
		<result column="Star_Time" property="Star_Time" />
		<result column="Star_Type" property="Star_Type" />
		
		
<discriminator javaType="int" column="Star_Type">
        <case value="1" resultMap="com.glut.news.mapper.ArticleMapper.baseResultMap"></case>
        <case value="2" resultMap="com.glut.news.mapper.VideoMapper.baseResultMap"></case>
    </discriminator>
	
	</resultMap>
		<!-- 模糊查询不同分类的文章列表 -->
	<sql id="whereSelective">
		<where>
			<if test="queryObject.Article_Type != null and queryObject.Article_Type.trim().length>0">
				<bind name="pattern" value="'%' + queryObject.Article_Type + '%'"/>
				Article_Type like #{pattern}
			</if>
		</where>
	</sql>
	
	<select id="selectById" parameterType="star" resultMap="baseResultMap">
	select * from Star where Star_Id=#{Star_Id}
	</select>
	
		<select id="selectStarCountByUserIdAndContentId" parameterType="star" resultType="int">
	select count(*) from Star where Star_UserId=#{Star_UserId} and Star_ContentId=#{Star_ContentId} 
	</select>
	<select id="selectVideoStarByUserId" parameterType="page" resultMap="baseResultMap">
		<!-- select * from (
			select a.*,rownum rn from(
				select * from (select * from Star where Star_UserId=#{queryObject.Star_UserId} ORDER BY Star_Id desc)  s,Video v where v.Video_Id=s.Star_ContentId  
			) a where <![CDATA[rownum<=#{lastIndex}]]>
		)  where rn>=#{firstIndex}  -->
				select * from (select * from Star where  Star_UserId=#{queryObject.Star_UserId} and Star_Type=2  ORDER BY Star_Id desc limit #{startRow},#{averPageSize}) s,Video v where v.Video_Id=s.Star_ContentId
	
	</select>
	
	<select id="selectArticleStarByUserId" parameterType="page" resultMap="baseResultMap">
		<!-- select * from (
			select a.*,rownum rn from(
				select * from (select * from Star where Star_UserId=#{queryObject.Star_UserId} ORDER BY Star_Id desc) s,Article a where a.Article_Id=s.Star_ContentId  
			) a where <![CDATA[rownum<=#{lastIndex}]]>
		)  where rn>=#{firstIndex}  -->
			select * from (select * from Star where Star_UserId=#{queryObject.Star_UserId}  and Star_Type=1 ORDER BY Star_Id desc limit #{startRow},#{averPageSize}) s,Article a where a.Article_Id=s.Star_ContentId
	
	</select>
<!--	<select id="selectByPage" parameterType="page" resultMap="baseResultMap">
&lt;!&ndash; 	select * from (
			select a.*,rownum rn from(
				select * from Article where  ORDER BY Artilce_Comments DESC
			) a where <![CDATA[rownum<=#{lastIndex}]]>
		)  where rn>=#{firstIndex}  &ndash;&gt;
				 select * from Star  where History_Persion=#{queryObject.History_Persion} and History_Type=1 ORDER BY History_Id desc limit #{startRow},#{averPageSize}
	
	</select>-->
	
<select id="selectTatolByUserId" parameterType="int" resultType="int">
select count(*) from Star where Star_UserId=#{userId}
</select>
	<sql id="insert_columns">
	<trim prefix="(" suffix=")" suffixOverrides=",">
	Star_Id,
	<if test="Star_ContentId!=null">Star_ContentId,</if>
	<if test="Star_UserId!=null">Star_UserId,</if>
	<if test="Star_Time!=null">Star_Time,</if>
	<if test="Star_Type!=null">Star_Type,</if>

	
	</trim>
	</sql>
	<sql id="insert_values" >
	<trim prefix="values(" suffix=")" suffixOverrides=",">
	
	<if test="Star_Id!=null">#{Star_Id},</if>
	<if test="Star_ContentId!=null">#{Star_ContentId},</if>
	<if test="Star_UserId!=null">#{Star_UserId},</if>
	<if test="Star_Time!=null">#{Star_Time},</if>
	<if test="Star_Type!=null">#{Star_Type},</if>
	
	</trim>
	</sql>
	<insert id="insertStar" parameterType="star">
	insert ignore into Star <include refid="insert_columns"/> <include refid="insert_values"/>
	</insert>
	
	
	</mapper>