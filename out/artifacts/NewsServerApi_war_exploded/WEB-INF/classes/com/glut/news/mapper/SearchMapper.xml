<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


 <!-- 名字空间,mybatis高版本后namespace属性是必须的，其作用用来区分每个SQL映射文件中的语句, 也就说在一个项目里可能会在不同的SQL 
	映射文件中存在相同的语句ID
	
	column不做限制，可以为任意表的字段，而property须为type 定义的pojo属性
<resultMap id="唯一的标识" type="映射的pojo对象">
  <id column="表的主键字段，或者可以为查询语句中的别名字段" jdbcType="字段类型" property="映射pojo对象的主键属性" />
  <result column="表的一个字段（可以为任意表的一个字段）" jdbcType="字段类型" property="映射到pojo对象的一个属性（须为type定义的pojo对象中的一个属性）"/>
  <association property="pojo的一个对象属性" javaType="pojo关联的pojo对象">
    <id column="关联pojo对象对应表的主键字段" jdbcType="字段类型" property="关联pojo对象的主席属性"/>
    <result  column="任意表的字段" jdbcType="字段类型" property="关联pojo对象的属性"/>
  </association>
  集合中的property须为oftype定义的pojo对象的属性
  <collection property="pojo的集合属性" ofType="集合中的pojo对象">
    <id column="集合中pojo对象对应的表的主键字段" jdbcType="字段类型" property="集合中pojo对象的主键属性" />
    <result column="可以为任意表的字段" jdbcType="字段类型" property="集合中的pojo对象的属性" />  
  </collection>
</resultMap>

	 -->
	
	<mapper namespace="com.glut.news.mapper.SearchMapper">
	<resultMap type="article" id="baseResultMap" >
	 <id column="Article_Id" property="Article_Id" />
		<result column="Article_Title" property="Article_Title" />
		<result column="Article_Content" property="Article_Content" />
		<result column="Article_Time" property="Article_Time" />
		<result column="Article_Author_name" property="Article_Author_name" />
			<result column="ARTICLE_KEYWORDS" property="Article_KeyWords" />
				<result column="ARTICLE_IMAGE" property="Article_Image" />

	</resultMap>
		<!-- 模糊查询不同分类的文章列表 -->
	<sql id="whereSelective">
		<where>
			<if test="queryObject.Article_Type != null and queryObject.Article_Type.trim().length>0">
				<bind name="pattern" value="'%' + queryObject.Article_Type + '%'"/>
				 CONCAT( ARTICLE_TITLE,ARTICLE_KEYWORDS) like #{pattern}
			</if>
		</where>
	</sql>
	<sql id="whereSelective1">
		<where>
			<if test="queryObject.Article_Type != null and queryObject.Article_Type.trim().length>0">
				<bind name="pattern" value="'%' + queryObject.Article_Type + '%'"/>
				 ARTICLE_TITLE like #{pattern}
			</if>
		</where>
	</sql>
	<sql id="whereSelective2">
		<where>
			<if test="queryObject.Article_Type != null and queryObject.Article_Type.trim().length>0">
				<bind name="pattern" value="'%' + queryObject.Article_Type + '%'"/>
				 CONCAT(VIDEO_TITLE,VIDEO_KEYWORD) like #{pattern}
			</if>
		</where>
	</sql>
	
	<select id="selectTotall" parameterType="page" resultType="int">
SELECT count(*) from ( select  a.ARTICLE_TITLE from Article  a union
select v.VIDEO_TITLE from Video v ) aa <include refid="whereSelective1"/>
	</select>
	<select id="searchData" parameterType="page" resultMap="baseResultMap">

	
	(select  a.ARTICLE_ID, a.ARTICLE_TITLE ,a.ARTICLE_AUTHOR_NAME ,a.ARTICLE_IMAGE,a.ARTICLE_CONTENT,a.ARTICLE_TIME,a.ARTICLE_KEYWORDS,a.Article_Type from Article a <include refid="whereSelective"/>  ORDER BY a.ARTICLE_ID DESC LIMIT #{startRow},#{averPageSize}) union
(select v.VIDEO_ID,v.VIDEO_TITLE,v.VIDEO_AUTHOR_NAME,v.VIDEO_IMAGE,v.VIDEO_DOWNLOAD,v.VIDEO_PUTTIME ,v.VIDEO_KEYWORD,v.Video_Type from Video v <include refid="whereSelective2"/> ORDER BY v.VIDEO_ID DESC LIMIT #{startRow},#{averPageSize})
	
	</select>

<select id="searchDataByAveraVideo" parameterType="page" resultMap="baseResultMap">
	
select v.VIDEO_ID,v.VIDEO_TITLE,v.VIDEO_AUTHOR_NAME,v.VIDEO_IMAGE,v.VIDEO_DOWNLOAD,v.VIDEO_PUTTIME from Video v <include refid="whereSelective2"/> ORDER BY v.VIDEO_ID DESC LIMIT #{startRow},#{averPageSize}
	</select>
	
	<select id="searchDataByAveraArticle" parameterType="page" resultMap="baseResultMap">
	
	select  a.ARTICLE_ID, a.ARTICLE_TITLE ,a.ARTICLE_AUTHOR_NAME ,a.ARTICLE_IMAGE,a.ARTICLE_CONTENT,a.ARTICLE_TIME from article a <include refid="whereSelective"/> GROUP BY ARTICLE_TITLE  ORDER BY a.ARTICLE_ID DESC LIMIT #{startRow},#{averPageSize}

	</select>
	</mapper>